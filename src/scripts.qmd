# Titan Files - Pillars

## Languages

## Projects

## CLoC

### Setup

### Script 00 (**Blade Runner**) - GIT Clone BOT

This script is responsible for the local clone of the repositories (main/marster brach) that will be analyzed by CLoC, for this we use the previous projects list.

*IMPORT*

```{python}
#| echo: true

import git
import pandas as pd
from datetime import datetime

```

*CODE*

```{python}

input_path = './src/_00/input/600_Starred_Projects_N.csv'
input_file = pd.read_csv(input_path)
output_path = './src/_00/output'

start = datetime.now()

for repository, language in zip(input_file['url'], input_file['main language']):
    local_repo_directory = f"{output_path}/{language}/{repository.split('/')[-2]}~{repository.split('/')[-1]}"
    print(f"{repository.split('/')[-2]}~{repository.split('/')[-1]}", end="")

    try:
        try:
            repo = git.Repo.clone_from(repository, local_repo_directory, branch='main')
            print(" -> Main branch")
        except git.exc.GitCommandError:
            try:
                repo = git.Repo.clone_from(repository, local_repo_directory, branch='master')
                print(" -> Master branch")
            except git.exc.GitCommandError:
                print(" -> \033[31mNo Main/Master branches found\033[m")

    except git.exc.GitCommandError as e:
        print()
        if "already exists and is not an empty directory" in e.stderr:
            print("\033[31mDestination path already exists and is not an empty directory\033[m")
        else:
            print(f"\033[31mAn error occurred: {e}\033[m")

end = datetime.now()
time = pd.DataFrame({'start' : start, 'end':end, 'time_expended':[end-start]})
time.to_csv(f'{output_path}/time~total.csv')

print('DONE!')

```

### Script 01 (**The ImitationÂ Game**) - CLoC BOT

This script is responsible for automating the CLoC analysis for all clones made before.

*IMPORT*

```{python}
#| echo: true

from os import path, listdir, system
from platform import system as op_sys

```

*CODE*

```{python}
def formater(file_path:str):
    file = pd.read_csv(file_path, low_memory='False', delimiter=DELIMITER)

    columns_to_remove = [col for col in file.columns if col.startswith("github.com/AlDanial/cloc")]
    file = file.drop(columns=columns_to_remove) # removing watermark

    sum_index = file.index[file.iloc[:, 0].str.startswith("SUM")]
    file = file.loc[:sum_index[0] - 1] if sum_index.any() else file # removing lines that we are not interested in

    file = file.rename(columns={'filename':'path'})

    file['owner'] = file['path'].apply(lambda x: x.split('\\')[5].split('~')[0])
    file['project'] = file['path'].apply(lambda x: x.split('\\')[5].split('~')[1])
    file['file'] = file['path'].apply(lambda x: x.split('\\')[-1]) # adding columns to the owner, project, and file name

    file = file[['path', 'owner', 'project', 'file', 'language', 'code', 'comment', 'blank']] # rearranging csv

    file.to_csv(file_path)

```

```{python}
input_path = './src/_00/output'
output_path = './src/_01/output'

start = datetime.now()

if op_sys() == "Windows":
    cloc = path.abspath("./src/_01/input/cloc.exe")  # CLoC.exe path
else:
    cloc = 'cloc' # REMEMBER TO INSTALL CLOC

# running CLoC for each cloned repositorysitories
for language in listdir(input_path):
    if language != f'time~total.csv':
        language_path = path.join(input_path, language)
        for repository in listdir(language_path):
            if path.exists(f'{output_path}/{language}/{repository}.csv'):
                print(f"\033[31mDestination path (\033[35m{repository}.csv\033[31m) already exists and is not an empty directoryn\033[m")
            else:
                system(f'{cloc} --by-file-by-lang --csv --out {output_path}/{language}/{repository}.csv {input_path}/{language}/{repository}') # runing CLoC
                
                formater(f'{output_path}/{language}/{repository}.csv')

                print(f'\n File \033[35m{repository}.csv\033[m was created successfully \n')
            
end = datetime.now()
time = pd.DataFrame({'start' : start, 'end':end, 'time_expended':[end-start]})
time.to_csv(f'{output_path}/time~total.csv')

```

### Script 02 (**The Wolf of Wall Street**) - CLoC Percentiles

*IMPORT*

``` {python}
import numpy as np
import os

```

*CODE*

``` {python}
input_path = 'src/_01/output'
output_path = 'src/_02/output'

```

## Script 02.a - Only Even Languages

*CODE*

``` {python}
all_dataframes = []

for language_dir in os.listdir(input_path):
    language_dir_path = os.path.join(input_path, language_dir)
    for file in os.listdir(language_dir_path):
        file_path = os.path.join(language_dir_path, file)
        dataframe = pd.read_csv(file_path, sep='|')
        dataframe['project language'] = language_dir
        dataframe['project'] = file.split('~')[1]
        dataframe['owner'] = file.split('~')[0]
        all_dataframes.append(dataframe)

combined_dataframe = pd.concat(all_dataframes, ignore_index=True)

filtered_dataframe = combined_dataframe[combined_dataframe['language'] == combined_dataframe['project language']]
grouped = filtered_dataframe.groupby('project language')
output_dataframes = []

for lang, group in grouped:
    code_percentiles = group['code'].describe(percentiles=[0.25, 0.5, 0.75, 0.90, 0.95, 0.97, 0.98, 0.99]).transpose()
    
    output_dataframe = pd.DataFrame({
        'language': lang,
        '#': [len(group)],
        'percentil 25': [np.ceil(code_percentiles['25%'])],
        'percentil 50': [np.ceil(code_percentiles['50%'])],
        'percentil 75': [np.ceil(code_percentiles['75%'])],
        'percentil 90': [np.ceil(code_percentiles['90%'])],
        'percentil 95': [np.ceil(code_percentiles['95%'])],
        'percentil 97': [np.ceil(code_percentiles['97%'])],
        'percentil 98': [np.ceil(code_percentiles['98%'])],
        'percentil 99': [np.ceil(code_percentiles['99%'])]
    })
    
    output_dataframes.append(output_dataframe)

final_output_dataframe = pd.concat(output_dataframes, ignore_index=True)
final_output_dataframe.to_csv(f'{output_path}/percentis_even_languages.csv', index=False)

filtered_languages = ["C", "C#", "C++", "Dart", "Elixir", "Go", "Haskell", "Java", "JavaScript", "Kotlin", "Lua", "Objective-C", "Perl", "PHP", "Python", "Ruby", "Rust", "Scala", "Swift", "TypeScript"]
output_filtered = final_output_dataframe[final_output_dataframe['language'].isin(filtered_languages)]
output_filtered.to_csv(f'{output_path}/percentis_even_languages_filtered.csv', index=False)

```

## Script 02.b - Per language

*CODE*

``` {python}
all_dataframes = []

for language_dir in os.listdir(input_path):
    language_dir_path = os.path.join(input_path, language_dir)
    for file in os.listdir(language_dir_path):
        file_path = os.path.join(language_dir_path, file)
        dataframe = pd.read_csv(file_path, sep='|')
        dataframe['project language'] = language_dir
        dataframe['project'] = file.split('~')[1]
        dataframe['owner'] = file.split('~')[0]
        all_dataframes.append(dataframe)

combined_dataframe = pd.concat(all_dataframes, ignore_index=True)
grouped = combined_dataframe.groupby('language')
output_dataframes = []

for lang, group in grouped:
    code_percentiles = group['code'].describe(percentiles=[0.25, 0.5, 0.75, 0.90, 0.95, 0.97, 0.98, 0.99]).transpose()
    
    output_dataframe = pd.DataFrame({
        'language': lang,
        '#': len(group),
        'percentil 25': [np.ceil(code_percentiles['25%'])],
        'percentil 50': [np.ceil(code_percentiles['50%'])],
        'percentil 75': [np.ceil(code_percentiles['75%'])],
        'percentil 90': [np.ceil(code_percentiles['90%'])],
        'percentil 95': [np.ceil(code_percentiles['95%'])],
        'percentil 97': [np.ceil(code_percentiles['97%'])],
        'percentil 98': [np.ceil(code_percentiles['98%'])],
        'percentil 99': [np.ceil(code_percentiles['99%'])]
    })
    
    output_dataframes.append(output_dataframe)

final_output_dataframe = pd.concat(output_dataframes, ignore_index=True)
final_output_dataframe.to_csv(f'{output_path}/percentis_by_language.csv', index=False)

filtered_languages = ["C", "C#", "C++", "Dart", "Elixir", "Go", "Haskell", "Java", "JavaScript", "Kotlin", "Lua", "Objective-C", "Perl", "PHP", "Python", "Ruby", "Rust", "Scala", "Swift", "TypeScript"]
output_filtered = final_output_dataframe[final_output_dataframe['language'].isin(filtered_languages)]
output_filtered.to_csv(f'{output_path}/percentis_by_language_filtered.csv', index=False)

```

## Script 02.c - Per Project

*CODE*

``` {python}
all_output_dataframes = []

# Loop through each language directory and read the files
for language_dir in os.listdir(input_path):
    language_dir_path = os.path.join(input_path, language_dir)
    for file in os.listdir(language_dir_path):
        file_path = os.path.join(language_dir_path, file)
        dataframe = pd.read_csv(file_path, sep='|')
        
        # Group the data by 'language' before calculating percentiles
        grouped = dataframe.groupby('language')
        
        for lang, group in grouped:
            code_percentiles = group['code'].describe(percentiles=[0.25, 0.5, 0.75, 0.90, 0.95, 0.97, 0.98, 0.99]).transpose()
            
            output_dataframe = pd.DataFrame({
                'project language': language_dir,
                'project': file.split('~')[1],
                'owner': file.split('~')[0],
                'code language': lang,
                '#': len(group),
                'percentil 25': [np.ceil(code_percentiles['25%'])],
                'percentil 50': [np.ceil(code_percentiles['50%'])],
                'percentil 75': [np.ceil(code_percentiles['75%'])],
                'percentil 90': [np.ceil(code_percentiles['90%'])],
                'percentil 95': [np.ceil(code_percentiles['95%'])],
                'percentil 97': [np.ceil(code_percentiles['97%'])],
                'percentil 98': [np.ceil(code_percentiles['98%'])],
                'percentil 99': [np.ceil(code_percentiles['99%'])]
            })
            all_output_dataframes.append(output_dataframe)

final_output_dataframe = pd.concat(all_output_dataframes, ignore_index=True)
final_output_dataframe.to_csv(f'{output_path}/percentis_by_project.csv', index=False)

```