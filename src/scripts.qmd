# Titan Files - Pillars

## Languages

## Projects

## CLoC

### Setup

```{python}
import git
from _00.input import Repos as repositories

from os import path, listdir, system
```

### Script 00 (**Year Zero**) - GIT Clone BOT

This script is responsible for the local clone of the repositories that will be analyzed by CLoC, for this we use the previous list of projects.

```{python}
for repository in repositories.list:
    local_repo_directory = f"./_00/output/{repository.split('/')[-2]}_{repository.split('/')[-1]}"
    print(f"{repository.split('/')[-2]}/{repository.split('/')[-1]}", end="")

    try:
        try:
            repo = git.Repo.clone_from(repository, local_repo_directory, branch='main')
            print("- Main branch")
        except git.exc.GitCommandError:
            try:
                repo = git.Repo.clone_from(repository, local_repo_directory, branch='master')
                print("- Master branch")
            except git.exc.GitCommandError:
                print("- No Main/Master branch found")

    except git.exc.GitCommandError as e:
        print()
        if "already exists and is not an empty directory" in e.stderr:
            print("Destination path already exists and is not an empty directory.")
        else:
            print("An error occurred:", e)

print('DONE!')

```

### Script 01 (**The Imitation Game**) - CLoC BOT

This script is responsible for automating the CLoC analysis for all clones made before.

```{python}

clones_folder = './src/_00/output'
output_folder = './src/_01/output'
CLoC_path = path.dirname(path.abspath("cloc.exe"))  # CLoc.exe path
system(f'cd {CLoc_path}')

for file in listdir(clones_folder):
    file_name = path.join(file)
    if path.exists(f'output/{file_name}.csv'):
        print(f"O arquivo {file_name}.csv já existe \n")
    else:
        system(f'cloc --by-file-by-lang --csv --out {output_folder}/{file_name}.csv {clones_folder}/{file_name}')
        print(f'\n Arquivo {file_name}.csv criado \n')
```